// Generated by rstantools.  Do not edit by hand.

/*
    qmix is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    qmix is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with qmix.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_qmixbrv_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'qmixbrv', line 29, column 2 to column 20)",
                                                      " (in 'qmixbrv', line 30, column 2 to column 40)",
                                                      " (in 'qmixbrv', line 31, column 2 to column 19)",
                                                      " (in 'qmixbrv', line 35, column 2 to column 14)",
                                                      " (in 'qmixbrv', line 36, column 2 to column 22)",
                                                      " (in 'qmixbrv', line 40, column 2 to column 11)",
                                                      " (in 'qmixbrv', line 42, column 4 to column 27)",
                                                      " (in 'qmixbrv', line 41, column 16 to line 43, column 3)",
                                                      " (in 'qmixbrv', line 41, column 2 to line 43, column 3)",
                                                      " (in 'qmixbrv', line 45, column 2 to column 40)",
                                                      " (in 'qmixbrv', line 46, column 2 to column 23)",
                                                      " (in 'qmixbrv', line 52, column 6 to column 14)",
                                                      " (in 'qmixbrv', line 54, column 8 to column 77)",
                                                      " (in 'qmixbrv', line 53, column 20 to line 55, column 7)",
                                                      " (in 'qmixbrv', line 53, column 6 to line 55, column 7)",
                                                      " (in 'qmixbrv', line 56, column 6 to column 26)",
                                                      " (in 'qmixbrv', line 51, column 18 to line 57, column 5)",
                                                      " (in 'qmixbrv', line 51, column 4 to line 57, column 5)",
                                                      " (in 'qmixbrv', line 59, column 6 to column 14)",
                                                      " (in 'qmixbrv', line 61, column 8 to column 75)",
                                                      " (in 'qmixbrv', line 60, column 20 to line 62, column 7)",
                                                      " (in 'qmixbrv', line 60, column 6 to line 62, column 7)",
                                                      " (in 'qmixbrv', line 63, column 6 to column 25)",
                                                      " (in 'qmixbrv', line 58, column 18 to line 64, column 5)",
                                                      " (in 'qmixbrv', line 58, column 4 to line 64, column 5)",
                                                      " (in 'qmixbrv', line 66, column 4 to column 23)",
                                                      " (in 'qmixbrv', line 50, column 16 to line 67, column 3)",
                                                      " (in 'qmixbrv', line 50, column 2 to line 67, column 3)",
                                                      " (in 'qmixbrv', line 17, column 2 to column 8)",
                                                      " (in 'qmixbrv', line 18, column 2 to column 8)",
                                                      " (in 'qmixbrv', line 19, column 26 to column 27)",
                                                      " (in 'qmixbrv', line 19, column 2 to column 31)",
                                                      " (in 'qmixbrv', line 20, column 9 to column 10)",
                                                      " (in 'qmixbrv', line 20, column 11 to column 12)",
                                                      " (in 'qmixbrv', line 20, column 2 to column 16)",
                                                      " (in 'qmixbrv', line 21, column 2 to column 8)",
                                                      " (in 'qmixbrv', line 22, column 2 to column 14)",
                                                      " (in 'qmixbrv', line 29, column 17 to column 18)",
                                                      " (in 'qmixbrv', line 29, column 9 to column 10)",
                                                      " (in 'qmixbrv', line 30, column 31 to column 32)",
                                                      " (in 'qmixbrv', line 31, column 10 to column 11)",
                                                      " (in 'qmixbrv', line 35, column 9 to column 10)",
                                                      " (in 'qmixbrv', line 4, column 4 to column 14)",
                                                      " (in 'qmixbrv', line 8, column 6 to column 36)",
                                                      " (in 'qmixbrv', line 7, column 11 to line 9, column 5)",
                                                      " (in 'qmixbrv', line 6, column 6 to column 31)",
                                                      " (in 'qmixbrv', line 5, column 14 to line 7, column 5)",
                                                      " (in 'qmixbrv', line 5, column 4 to line 9, column 5)",
                                                      " (in 'qmixbrv', line 10, column 4 to column 17)",
                                                      " (in 'qmixbrv', line 3, column 29 to line 11, column 3)"};
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
pald2(const T0__& mu, const T1__& p, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ prob;
    prob = DUMMY_VAR__;
    
    current_statement__ = 48;
    if (logical_lt(mu, 0)) {
      current_statement__ = 46;
      prob = (p * stan::math::exp((mu * (1 - p))));
    } else {
      current_statement__ = 44;
      prob = (1 - ((1 - p) * stan::math::exp((-mu * p))));
    }
    current_statement__ = 49;
    return prob;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct pald2_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& mu, const T1__& p, std::ostream* pstream__)  const 
{
return pald2(mu, p, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_qmixbrv final : public model_base_crtp<model_qmixbrv> {
private:
  int N;
  int D;
  Eigen::Matrix<double, -1, 1> Y;
  Eigen::Matrix<double, -1, -1> X;
  int k;
  double offset;
 
public:
  ~model_qmixbrv() { }
  
  inline std::string model_name() const final { return "model_qmixbrv"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_qmixbrv(stan::io::var_context& context__,
                unsigned int random_seed__ = 0,
                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_qmixbrv_namespace::model_qmixbrv";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 29;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 29;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 30;
      context__.validate_dims("data initialization","D","int",
          context__.to_vec());
      D = std::numeric_limits<int>::min();
      
      current_statement__ = 30;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 31;
      validate_non_negative_index("Y", "N", N);
      current_statement__ = 32;
      context__.validate_dims("data initialization","Y","double",
          context__.to_vec(N));
      Y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 32;
        assign(Y_flat__, nil_index_list(), context__.vals_r("Y"),
          "assigning variable Y_flat__");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 32;
          assign(Y, cons_list(index_uni(sym1__), nil_index_list()),
            Y_flat__[(pos__ - 1)], "assigning variable Y");
          current_statement__ = 32;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 32;
        current_statement__ = 32;
        check_greater_or_equal(function__, "Y[sym1__]", Y[(sym1__ - 1)], 0);}
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 32;
        current_statement__ = 32;
        check_less_or_equal(function__, "Y[sym1__]", Y[(sym1__ - 1)], 1);}
      current_statement__ = 33;
      validate_non_negative_index("X", "N", N);
      current_statement__ = 34;
      validate_non_negative_index("X", "D", D);
      current_statement__ = 35;
      context__.validate_dims("data initialization","X","double",
          context__.to_vec(N, D));
      X = Eigen::Matrix<double, -1, -1>(N, D);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 35;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 35;
        pos__ = 1;
        current_statement__ = 35;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 35;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 35;
            assign(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_flat__[(pos__ - 1)], "assigning variable X");
            current_statement__ = 35;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 36;
      context__.validate_dims("data initialization","k","int",
          context__.to_vec());
      k = std::numeric_limits<int>::min();
      
      current_statement__ = 36;
      k = context__.vals_i("k")[(1 - 1)];
      current_statement__ = 37;
      context__.validate_dims("data initialization","offset","double",
          context__.to_vec());
      offset = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 37;
      offset = context__.vals_r("offset")[(1 - 1)];
      current_statement__ = 38;
      validate_non_negative_index("beta", "k", k);
      current_statement__ = 39;
      validate_non_negative_index("beta", "D", D);
      current_statement__ = 40;
      validate_non_negative_index("p_tmp", "k", k);
      current_statement__ = 41;
      validate_positive_index("theta", "k", k);
      current_statement__ = 42;
      validate_non_negative_index("p", "k", k);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += k * D;
      num_params_r__ += k;
      num_params_r__ += (k - 1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_qmixbrv_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta;
      beta = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(k, Eigen::Matrix<local_scalar_t__, -1, 1>(D));
      stan::math::fill(beta, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 1;
        assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(D), "assigning variable beta");}
      Eigen::Matrix<local_scalar_t__, -1, 1> p_tmp;
      p_tmp = Eigen::Matrix<local_scalar_t__, -1, 1>(k);
      stan::math::fill(p_tmp, DUMMY_VAR__);
      
      current_statement__ = 2;
      p_tmp = in__.vector(k);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(p_tmp, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(p_tmp[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable p_tmp");
        } else {
          current_statement__ = 2;
          assign(p_tmp, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(p_tmp[(sym1__ - 1)], 0, 1),
            "assigning variable p_tmp");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> theta;
      theta = Eigen::Matrix<local_scalar_t__, -1, 1>(k);
      stan::math::fill(theta, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_in__;
      theta_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((k - 1));
      stan::math::fill(theta_in__, DUMMY_VAR__);
      
      current_statement__ = 3;
      theta_in__ = in__.vector((k - 1));
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        assign(theta, nil_index_list(),
          stan::math::simplex_constrain(theta_in__, lp__),
          "assigning variable theta");
      } else {
        current_statement__ = 3;
        assign(theta, nil_index_list(),
          stan::math::simplex_constrain(theta_in__),
          "assigning variable theta");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> p;
      p = Eigen::Matrix<local_scalar_t__, -1, 1>(k);
      stan::math::fill(p, DUMMY_VAR__);
      
      current_statement__ = 5;
      assign(p, nil_index_list(), sort_asc(p_tmp), "assigning variable p");
      {
        local_scalar_t__ lik;
        lik = DUMMY_VAR__;
        
        current_statement__ = 9;
        for (int i = 1; i <= k; ++i) {
          current_statement__ = 7;
          lp_accum__.add(normal_lpdf<propto__>(beta[(i - 1)], 0, 10));}
        current_statement__ = 10;
        lp_accum__.add(dirichlet_lpdf<propto__>(theta, rep_vector(1.0, k)));
        current_statement__ = 11;
        lp_accum__.add(uniform_lpdf<propto__>(p_tmp, 0, 1));
        current_statement__ = 28;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 18;
          if (logical_eq(Y[(i - 1)], 1)) {
            current_statement__ = 12;
            lik = 0;
            current_statement__ = 15;
            for (int j = 1; j <= k; ++j) {
              current_statement__ = 13;
              lik = (lik +
                      (theta[(j - 1)] *
                        (1 -
                          pald2(
                            -dot_product(
                               rvalue(X,
                                 cons_list(index_uni(i),
                                   cons_list(index_omni(), nil_index_list())),
                                 "X"), beta[(j - 1)]), p[(j - 1)], pstream__))));
            }
            current_statement__ = 16;
            lik = (lik + offset);
          } 
          current_statement__ = 25;
          if (logical_eq(Y[(i - 1)], 0)) {
            current_statement__ = 19;
            lik = 0;
            current_statement__ = 22;
            for (int j = 1; j <= k; ++j) {
              current_statement__ = 20;
              lik = (lik +
                      (theta[(j - 1)] *
                        pald2(
                          -dot_product(
                             rvalue(X,
                               cons_list(index_uni(i),
                                 cons_list(index_omni(), nil_index_list())),
                               "X"), beta[(j - 1)]), p[(j - 1)], pstream__)));
            }
            current_statement__ = 23;
            lik = (lik + offset);
          } 
          current_statement__ = 26;
          lp_accum__.add(stan::math::log(lik));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_qmixbrv_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<Eigen::Matrix<double, -1, 1>> beta;
      beta = std::vector<Eigen::Matrix<double, -1, 1>>(k, Eigen::Matrix<double, -1, 1>(D));
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 1;
        assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(D), "assigning variable beta");}
      Eigen::Matrix<double, -1, 1> p_tmp;
      p_tmp = Eigen::Matrix<double, -1, 1>(k);
      stan::math::fill(p_tmp, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      p_tmp = in__.vector(k);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 2;
        assign(p_tmp, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(p_tmp[(sym1__ - 1)], 0, 1),
          "assigning variable p_tmp");}
      Eigen::Matrix<double, -1, 1> theta;
      theta = Eigen::Matrix<double, -1, 1>(k);
      stan::math::fill(theta, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_in__;
      theta_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((k - 1));
      stan::math::fill(theta_in__, DUMMY_VAR__);
      
      current_statement__ = 3;
      theta_in__ = in__.vector((k - 1));
      current_statement__ = 3;
      assign(theta, nil_index_list(),
        stan::math::simplex_constrain(theta_in__), "assigning variable theta");
      Eigen::Matrix<double, -1, 1> p;
      p = Eigen::Matrix<double, -1, 1>(k);
      stan::math::fill(p, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          vars__.emplace_back(beta[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_tmp[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(theta[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 5;
      assign(p, nil_index_list(), sort_asc(p_tmp), "assigning variable p");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          vars__.emplace_back(p[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<Eigen::Matrix<double, -1, 1>> beta;
      beta = std::vector<Eigen::Matrix<double, -1, 1>>(k, Eigen::Matrix<double, -1, 1>(D));
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 1;
        assign(beta_flat__, nil_index_list(), context__.vals_r("beta"),
          "assigning variable beta_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
            current_statement__ = 1;
            assign(beta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              beta_flat__[(pos__ - 1)], "assigning variable beta");
            current_statement__ = 1;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> p_tmp;
      p_tmp = Eigen::Matrix<double, -1, 1>(k);
      stan::math::fill(p_tmp, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> p_tmp_flat__;
        current_statement__ = 2;
        assign(p_tmp_flat__, nil_index_list(), context__.vals_r("p_tmp"),
          "assigning variable p_tmp_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 2;
          assign(p_tmp, cons_list(index_uni(sym1__), nil_index_list()),
            p_tmp_flat__[(pos__ - 1)], "assigning variable p_tmp");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> p_tmp_free__;
      p_tmp_free__ = Eigen::Matrix<double, -1, 1>(k);
      stan::math::fill(p_tmp_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 2;
        assign(p_tmp_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(p_tmp[(sym1__ - 1)], 0, 1),
          "assigning variable p_tmp_free__");}
      Eigen::Matrix<double, -1, 1> theta;
      theta = Eigen::Matrix<double, -1, 1>(k);
      stan::math::fill(theta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> theta_flat__;
        current_statement__ = 3;
        assign(theta_flat__, nil_index_list(), context__.vals_r("theta"),
          "assigning variable theta_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 3;
          assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
            theta_flat__[(pos__ - 1)], "assigning variable theta");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> theta_free__;
      theta_free__ = Eigen::Matrix<double, -1, 1>((k - 1));
      stan::math::fill(theta_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      assign(theta_free__, nil_index_list(), stan::math::simplex_free(theta),
        "assigning variable theta_free__");
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= D; ++sym2__) {
          vars__.emplace_back(beta[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_tmp_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= (k - 1); ++sym1__) {
        vars__.emplace_back(theta_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("beta");
    names__.emplace_back("p_tmp");
    names__.emplace_back("theta");
    names__.emplace_back("p");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(k),
                                             static_cast<size_t>(D)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(k)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(k)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(k)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_tmp" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_tmp" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= (k - 1); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" << k << ",\"element_type\":{\"name\":\"vector\",\"length\":" << D << "}},\"block\":\"parameters\"},{\"name\":\"p_tmp\",\"type\":{\"name\":\"vector\",\"length\":" << k << "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" << k << "},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" << k << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" << k << ",\"element_type\":{\"name\":\"vector\",\"length\":" << D << "}},\"block\":\"parameters\"},{\"name\":\"p_tmp\",\"type\":{\"name\":\"vector\",\"length\":" << k << "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" << (k - 1) << "},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" << k << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_qmixbrv_namespace::model_qmixbrv;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_qmixbrv_namespace::profiles__;
}
#endif
#endif
